@page "/Origen/Create"
@inject OrigenService origenService
@inject NavigationManager navigation

<PageTitle>Crear vuelo de Origen</PageTitle>
<EditForm Model="Origen" OnValidSubmit="Crear" FormName="crearOrigenForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Crear Vuelo</strong></h1>
            </div>
            <div class="card-body">

                <label class="form-label" for="OrigenId"><strong>Origen ID:</strong></label>
                <InputNumber id="OrigenId" class="form-control" @bind-Value="Origen.OrigenId" readonly />

                <label class="form-label" for="Fecha"><strong>Origen del Vuelo</strong></label>
                <InputText id="Fecha" class="form-control" @bind-Value="Origen.origen"></InputText>
                <ValidationMessage For="@(() => Origen.origen)"></ValidationMessage>

            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-90deg-left" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill">Crear</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Origen Origen { get; set; } = new Origen();
    public List<Origen> origenList { get; set; } = new List<Origen>();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Inicializa la lista de orígenes, aunque no es necesario en esta página específica
        await CargarOrigenes();
    }

    private async Task Crear()
    {
        // Asegúrate de que el modelo está correctamente validado
        if (Origen == null || string.IsNullOrWhiteSpace(Origen.origen))
        {
            // Mostrar mensaje si no se introduce el origen
            Mensaje = "El origen es obligatorio.";
            return;
        }

        // Guarda el nuevo origen
        await origenService.Guardar(Origen);

        // Resetea el modelo de Origen
        Origen = new Origen();

        // Vuelve a cargar la lista de orígenes para reflejar el nuevo registro
        await CargarOrigenes();

        // Redirige a la página de índice
        navigation.NavigateTo("/Origen/Index");
    }

    private async Task CargarOrigenes()
    {
        // Recarga la lista de orígenes después de la creación
        origenList = await origenService.Listar(o => o.OrigenId > 0);
    }

    public void Volver()
    {
        // Redirige a la página de reservas si el usuario presiona el botón "Volver"
        navigation.NavigateTo("/Reserva/Index");
    }
}
