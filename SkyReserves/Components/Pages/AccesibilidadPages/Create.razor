@page "/Accesibilidad/Create"
@rendermode InteractiveServer
@inject AccesibilidadService accesibilidadService
@inject NavigationManager navigation
@inject ToastService Toast
<link rel="stylesheet" href="/Style/Accesibilidad.css?v=1.0" />


<PageTitle>Crear Accesibilidad </PageTitle>
<EditForm Model="Accesibilidad" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Crear Accesibilidad</strong></h1>
            </div>
            <div class="card-body">

                <label class="form-label" for="accesibilidadId"><strong>Accesibilidad ID:</strong></label>
                <InputNumber id="AccesibilidadId" class="form-control" @bind-Value="Accesibilidad.AccesibilidadId" readonly></InputNumber>


                <label class="form-label" for="Fecha"><strong>Descripcion </strong></label>
                <InputText id="descripcion" class="form-control" @bind-Value="Accesibilidad.Descripcion"></InputText>
                <ValidationMessage For="@(() => Accesibilidad.Descripcion)" />

            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-whie bi bi-arrow-90deg-left" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill"> Crear</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    public Accesibilidad Accesibilidad { get; set; } = new Accesibilidad();
    public List<Accesibilidad> accesibilidadList { get; set; } = new List<Accesibilidad>();
    public string Mensaje { get; set; } = string.Empty;
    //public List<ToastMessage> MensajeToast { get; set; } = new List<ToastMessage>();


    protected override async Task OnInitializedAsync()
    {
        accesibilidadList = await accesibilidadService.Listar(o => o.AccesibilidadId > 0);
    }

    public async Task<bool> Validar()
    {
        var accesibilidadExiste = await accesibilidadService.BuscarAccesibilidad(Accesibilidad.Descripcion);
        if (accesibilidadExiste != null)
        {
            Toast.Notify(new(ToastType.Warning, "Error al crear la accesibilidad", "Esta accesibilidad ya existe!"));
            return false;
        }

        return true;
    }

 
    public async Task Crear()
    {
        if (await Validar())
        {

            Toast.Notify(new(ToastType.Success, "Accesibilidad Guardada", "La accesibilidad se ha guardado con exito!"));
            await accesibilidadService.Guardar(Accesibilidad);
            Accesibilidad = new Accesibilidad();
            navigation.NavigateTo("/Accesibilidad/Index");
        }
    }


    public void Volver()
    {
        
        navigation.NavigateTo("/Accesibilidad/Index");

    }

}




