@page "/Reserva/Edit/{ReservaId:int}"
@rendermode InteractiveServer
@inject ReservaService reservaService
@inject OrigenService origenService
@inject DestinoService destinoService
@inject NavigationManager navigation
@inject ToastService Toast
@inject Context Dbcontext
@inject VueloService vueloService
@inject AsientoDetalleService  asientoDetalleService
@inject ClaseVueloDetalleService claseVueloDetalleService
@inject ClaseVueloService claseVueloService
<link rel="stylesheet" href="/Style/ConfirmReserve.css" />

<PageTitle>Confirmar reserva</PageTitle>
<EditForm Model="Reserva" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <ValidationSummary />



        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header text-center">
                    <h5><strong>Seleccionar Asientos</strong></h5>
                </div>
                <div class="card-body">
                    <SeleccionarAsientoPicker ListaAsientos="AsientoList" 
                    AsientoId="ReservaAsientoDetalle.AsientoId"
                    AsientoSeleccionado="AgregarAsiento" />

                    <hr />

                    <div class="text-center">
                        <img src="/ImagenesFondo/Boeing 737-Max 8 diagram.png" alt="Boeing 737-Max 8" class="img-fluid mt-4" />
                    </div>

                    <table class="table table-light">
                        <thead class="table table-stripped">
                            <tr class="text-center">
                                <th>Asiento ID</th>
                                <th>Fila</th>
                                <th>Letra</th>
                                <th>Disponibilidad</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var asiento in Reserva?.AsientoDetalle ?? new List<AsientoDetalle>())

                            {
                                if (asiento is null) continue;
                                <tr class="text-center">
                                    <td class="ps-3">@asiento.AsientoId</td>
                                    <td class="ps-3">@asiento.Fila</td>
                                    <td class="ps-3">@asiento.Letra</td>
                                    <td class="ps-3">@asiento.Existencia</td>
                                    <td class="ps-3">
                                        <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverAsiento(asiento)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div> 
        </div>
        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header text-center">
                    <h5><strong>Seleccionar Clase de vuelo</strong></h5>
                </div>
                <div class="card-body">
                    <SeleccionarClaseVueloPicker ListaClaseVuelo="ClaseVueloList" 
                    ClaseVueloId="ClaseVueloDetalle.ClaseVueloId"
                    ClaseVueloSeleccionado="AgregarClaseVuelo" />

                    <hr />

                    <table class="table table-light">
                        <thead class="table table-stripped">
                            <tr class="text-center">
                                <th>Clase Vuelo ID</th>
                                <th>Descripcion Clase</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claseVuelo in Reserva.ClaseVueloDetalle)
                            {
                                if (claseVuelo is null) continue;
                                <tr class="text-center">
                                    <td class="ps-3">@claseVuelo.ClaseVueloId</td>
                                    <td class="ps-3">@claseVuelo.DescripcionClase</td>
                                    <td class="ps-3">
                                        <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverClaseVuelo(claseVuelo)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="card-footer text-center">
                <button type="button" class="btn btn-morado bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-morado  bi-floppy-fill"> Reservar vuelo</button>
            </div>
        </div>

</EditForm>

@code {

    [Parameter]
    public int ReservaId { get; set; }
    public int VueloId { get; set; }

    public int OrigenId { get; set; }
    public int DestinoId { get; set; }
    public Reserva2 Reserva { get; set; } = new Reserva2();

    public AsientoDetalle ReservaAsientoDetalle { get; set; } = new AsientoDetalle();
    private List<AsientoDetalle> asientoDetalleList = new List<AsientoDetalle>();
    public ClaseVueloDetalle ClaseVueloDetalle { get; set; } = new ClaseVueloDetalle();

    public Vuelo2 Vuelo { get; set; } = new Vuelo2();
    public List<Origen2> OrigenList { get; set; } = new();
    public List<Destino2> DestinoList { get; set; } = new();
    public List<Asiento2> AsientoList { get; set; } = new();
    public List<AsientoDetalle> AsientosSeleccionados { get; set; } = new List<AsientoDetalle>();
    public Origen2 origen2 { get; set; } = new Origen2();
    public Destino2 destino2 { get; set; } = new Destino2();
    public List<ClaseVuelo2> ClaseVueloSeleccionado { get; set; } = new();
    public List<ClaseVuelo2> ClaseVueloList { get; set; } = new List<ClaseVuelo2>();
    public Asiento2 Asiento { get; set; } = new Asiento2();
    public List<Reserva2> reservaList { get; set; } = new List<Reserva2>();
    public string mensaje { get; set; } = string.Empty;




    protected override async Task OnInitializedAsync()
    {
        
        AsientoList = await asientoDetalleService.Listar(a => a.AsientoId > 0);
        ClaseVueloList = await claseVueloDetalleService.Listar(c => c.ClaseVueloId > 0);
     

    }



    public void AgregarAsiento(int asientoId)
    {
        var asiento = AsientoList.FirstOrDefault(a => a.AsientoId == asientoId);
        if (asiento != null && !Reserva.AsientoDetalle.Any(ad => ad.AsientoId == asiento.AsientoId))
        {
            var asientoDetalle = new AsientoDetalle
                {
                    AsientoId = asiento.AsientoId,
                    ReservaId = Reserva.ReservaId,
                    Fila = asiento.Fila,
                    Letra = asiento.Letra,
                    Existencia = asiento.Existencia
                };

            Reserva.AsientoDetalle.Add(asientoDetalle);
        }
        else
        {
            mensaje = asiento == null
                ? "El asiento seleccionado no existe."
                : "El asiento ya está seleccionado.";
        }
    }



    public void AgregarClaseVuelo(int claseVueloId)
    {
        var claseVuelo = ClaseVueloList.FirstOrDefault(c => c.ClaseVueloId == claseVueloId);
        if (claseVuelo != null && !ClaseVueloSeleccionado.Contains(claseVuelo))
        {
            ClaseVueloSeleccionado.Add(claseVuelo); // <- Aquí ClaseVueloSeleccionado espera ClaseVuelo2
            var claseVueloDetalle = new ClaseVueloDetalle
                {
                    ClaseVueloId = claseVuelo.ClaseVueloId,
                    DescripcionClase = claseVuelo.descripcionClase
                };

            Reserva.ClaseVueloDetalle.Add(claseVueloDetalle); // <- Aquí Reserva espera ClaseVueloDetalle
        }
    }





    private async Task Crear()
    {
       if (!Reserva.AsientoDetalle.Any())
        {
            Toast.Notify(new(ToastType.Warning, "No se han seleccionado asientos", "Por favor seleccione al menos un asiento."));
            return;
        }

        if (!Reserva.ClaseVueloDetalle.Any())
        {
            Toast.Notify(new(ToastType.Warning, "No se han seleccionado la clase de vuelo", "Por favor seleccione la clase de vuelo."));
            return;
        }

        Toast.Notify(new(ToastType.Primary, "Vuelo reservado", "El vuelo se ha reservado con exito!"));
        var crearReserva = await reservaService.Guardar(Reserva);
        Reserva = new Reserva2();
        if (crearReserva)
        {
           
            navigation.NavigateTo("/Ticket/Index");
        }
        else
        {
          
        }
    }




    private void RemoverAsiento(AsientoDetalle asiento)
    {
        if (asiento != null)
        {
           AsientosSeleccionados.Remove(asiento);
        }
    }



    private void RemoverClaseVuelo(ClaseVueloDetalle claseVueloDetalle)
    {
        if (claseVueloDetalle != null)
        {
            Reserva.ClaseVueloDetalle.Remove(claseVueloDetalle);
        }
    }


    private void Volver()
    {
        navigation.NavigateTo("/Reserva/Index");
    }
}
