@page "/Reserva/Create"
@rendermode InteractiveServer
@inject AsientoDetalleService asientoDetalleService
@inject ClaseVueloDetalleService claseVueloDetalleService
@inject OrigenService origenService
@inject DestinoService destinoService
@inject ToastService Toast
@inject ReservaService reservaService
@inject NavigationManager navigation

<link rel="stylesheet" href="/Style/ConfirmReserve.css" />


<PageTitle>Crear Nueva Reserva</PageTitle>

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="Reserva" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Nueva Reserva</h5>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label for="ReservaId" class="form-label"><strong>Reserva Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Reserva.ReservaId" readonly></InputNumber>
                </div>

                <label class="form-label" for="Origen"><strong>Origen</strong></label>
                <InputSelect id="Origen" class="form-control" @bind-Value="Vuelo.OrigenId">
                    <option value="0" disabled selected>Seleccione un origen de vuelo</option>
                    @foreach (var origen in origenList)
                    {
                        <option value="@origen.OrigenId">@origen.origen</option>
                    }
                </InputSelect>

                <label class="form-label" for="Destino"><strong>Destino</strong></label>
                <InputSelect id="Destino" class="form-control" @bind-Value="Vuelo.DestinoId">
                    <option value="0" disabled selected>Seleccione un destino de vuelo</option>
                    @foreach (var destino in destinoList)
                    {
                        <option value="@destino.DestinoId">@destino.destino</option>
                    }
                </InputSelect>


                <div class="container">
                    <div class="card shadow-lg">
                        <div class="card-header text-center">
                            <h5><strong>Seleccionar Asientos</strong></h5>
                        </div>
                        <div class="card-body">
                            <SeleccionarAsientoPicker ListaAsientos="AsientoList"
                                                      AsientoId="AsientoDetalle.AsientoId"
                                                      AsientoSeleccionado="AgregarAsiento" />

                            <hr />

                            <div class="text-center">
                                <img src="/ImagenesFondo/Boeing 737-Max 8 diagram.png" alt="Boeing 737-Max 8" class="img-fluid mt-4" />
                            </div>

                            <table class="table table-light">
                                <thead class="table table-stripped">
                                    <tr class="text-center">
                                        <th>Asiento ID</th>
                                        <th>Fila</th>
                                        <th>Letra</th>
                                        <th>Disponibilidad</th>
                                        <th>Remover</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var asiento in Reserva?.AsientoDetalle ?? new List<AsientoDetalle>())
                                    {
                                        <tr class="text-center">
                                            <td class="ps-3">@asiento.AsientoId</td>
                                            <td class="ps-3">@asiento.Fila</td>
                                            <td class="ps-3">@asiento.Letra</td>
                                            <td class="ps-3">@asiento.Existencia</td>
                                            <td class="ps-3">
                                                <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverAsiento(asiento)"></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="container">
                    <div class="card shadow-lg">
                        <div class="card-header text-center">
                            <h5><strong>Seleccionar Clase de vuelo</strong></h5>
                        </div>
                        <div class="card-body">
                            <SeleccionarClaseVueloPicker ListaClaseVuelo="ClaseVueloList"
                                                         ClaseVueloId="ClaseVueloDetalle.ClaseVueloId"
                                                         ClaseVueloSeleccionado="AgregarClaseVuelo" />

                            <hr />

                            <table class="table table-light">
                                <thead class="table table-stripped">
                                    <tr class="text-center">
                                        <th>Clase Vuelo ID</th>
                                        <th>Descripcion Clase</th>
                                        <th>Remover</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var claseVuelo in Reserva.ClaseVueloDetalle ?? new List<ClaseVueloDetalle>())
                                    {
                                        if (claseVuelo is null) continue;
                                        <tr class="text-center">
                                            <td class="ps-3">@claseVuelo.ClaseVueloId</td>
                                            <td class="ps-3">@claseVuelo.DescripcionClase</td>
                                            <td class="ps-3">
                                                <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverClaseVuelo(claseVuelo)"></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            <div class="card-footer">
                <a href="/Reserva/Index" class="btn btn-morado text-white bi bi-arrow-90deg-left"> Volver</a>
                <button type="submit" class="btn btn-morado bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>
</div>
</EditForm>

@code {
    [Parameter]
    public int ReservaId { get; set; }
    public Reserva Reserva { get; set; } = new Reserva();
    public List<Origen> origenList { get; set; } = new List<Origen>();
    public List<Destino> destinoList { get; set; } = new List<Destino>();
    public List<ClaseVueloDetalle> ClaseVueloDetalleList { get; set; } = new List<ClaseVueloDetalle>();
    public List<AsientoDetalle> AsientoDetalleList { get; set; } = new List<AsientoDetalle>();
    public Vuelo Vuelo { get; set; } = new Vuelo();
    public AsientoDetalle AsientoDetalle { get; set; } = new AsientoDetalle();
    public List<Asiento> AsientoList { get; set; } = new List<Asiento>();
    public List<ClaseVuelo> ClaseVueloList { get; set; } = new List<ClaseVuelo>();
    public ClaseVueloDetalle ClaseVueloDetalle { get; set; } = new ClaseVueloDetalle();
    public List<ClaseVuelo> ClaseVueloSeleccionado { get; set; } = new ();


    protected override async Task OnInitializedAsync()
    {
        origenList = await origenService.Listar(o => o.OrigenId > 0);
        destinoList = await destinoService.Listar(d => d.DestinoId > 0);
        AsientoList = await asientoDetalleService.Listar(a => a.AsientoId > 0);
        ClaseVueloList = await claseVueloDetalleService.Listar(c => c.ClaseVueloId > 0);
        

    }


    private async Task AgregarAsiento(int asientoId)
    {
        var asientoSeleccionado = AsientoList.SingleOrDefault(a => a.AsientoId == asientoId);
        if (asientoSeleccionado != null && asientoSeleccionado.Existencia > 0)
        {
            Reserva.AsientoDetalle.Add(new AsientoDetalle
                {
                    AsientoId = asientoSeleccionado.AsientoId,
                    Fila = asientoSeleccionado.Fila,
                    Letra = asientoSeleccionado.Letra,
                    Existencia = asientoSeleccionado.Existencia
                });
            Toast.Notify(new(ToastType.Success, "Éxito", "Asiento agregado correctamente."));
        }
        else
        {
            Toast.Notify(new(ToastType.Danger, "Error", "El asiento no está disponible."));
        }

        await Task.CompletedTask;
    }



    public void AgregarClaseVuelo(int claseVueloId)
    {
        var claseVuelo = ClaseVueloList.FirstOrDefault(c => c.ClaseVueloId == claseVueloId);
        if (claseVuelo != null && !ClaseVueloSeleccionado.Contains(claseVuelo))
        {
            ClaseVueloSeleccionado.Add(claseVuelo); // <- Aquí ClaseVueloSeleccionado espera ClaseVuelo2
            var claseVueloDetalle = new ClaseVueloDetalle
                {
                    ClaseVueloId = claseVuelo.ClaseVueloId,
                    DescripcionClase = claseVuelo.descripcionClase
                };

            Reserva.ClaseVueloDetalle.Add(claseVueloDetalle); // <- Aquí Reserva espera ClaseVueloDetalle
        }
    }



    private void RemoverAsiento(AsientoDetalle asiento)
    {
        if (asiento != null)
        {
            Reserva.AsientoDetalle.Remove(asiento);
        }
    }



    private void RemoverClaseVuelo(ClaseVueloDetalle claseVueloDetalle)
    {
        if (claseVueloDetalle != null)
        {
            Reserva.ClaseVueloDetalle.Remove(claseVueloDetalle);
        }
    }

    public async Task Guardar()
    {
        if (!Reserva.AsientoDetalle.Any())
        {
            Toast.Notify(new(ToastType.Danger, "Error", "Debe agregar al menos un detalle de asiento."));
            return;
        }

        await reservaService.Guardar(Reserva);
        Toast.Notify(new(ToastType.Success, "Éxito", "Reserva registrada correctamente"));
        await Task.Delay(4000);
        navigation.NavigateTo("/Pasaporte/Index");
    }
}
