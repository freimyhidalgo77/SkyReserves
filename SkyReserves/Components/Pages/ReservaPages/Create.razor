@page "/Reserva/Create"
@using SkyReserve.DAL
@rendermode InteractiveServer
@inject ReservaService reservaService
@inject OrigenService origenService
@inject DestinoService destinoService
@inject AsientoService asientosService
@inject NavigationManager navigation
@inject ToastService Toast
@inject Context Dbcontext
<link rel="stylesheet" href="/Style/Reserve.css" />

<PageTitle>Crear Reserva</PageTitle>
<EditForm Model="Reserva" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5><strong>Crear Reserva</strong></h5>
            </div>
            <div class="card-body">
                <label class="form-label" for="ReservaId"><strong>Reserva ID:</strong></label>
                <InputNumber id="ReservaId" class="form-control" @bind-Value="Reserva.ReservaId" readonly />

                <label class="form-label" for="Origen"><strong>Origen</strong></label>
                <InputSelect id="Origen" class="form-control" @bind-Value="Reserva.Origen">
                    @foreach (var origen in OrigenList)
                    {
                        <option value="@origen.OrigenId">@origen.origen</option>
                    }
                </InputSelect>

                <label class="form-label" for="Destino"><strong>Destino</strong></label>
                <InputSelect id="Destino" class="form-control" @bind-Value="Reserva.Destino">
                    @foreach (var destino in DestinoList)
                    {
                        <option value="@destino.DestinoId">@destino.destino</option>
                    }
                </InputSelect>

                <label class="form-label" for="NumeroPasajeros"><strong>Número de Pasajeros</strong></label>
                <div class="input-group">
                    <button class="btn btn-outline-secondary" type="button" @onclick="DecrementarPasajeros">-</button>
                    <InputNumber id="NumeroPasajeros" class="form-control" @bind-Value="Reserva.NumeroPasajeros" min="1" readonly />
                    <button class="btn btn-outline-secondary" type="button" @onclick="IncrementarPasajeros">+</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5><strong>Seleccionar Asientos</strong></h5>
            </div>
            <div class="card-body">
                <SeleccionarAsientoPicker ListaAsientos="AsientoList"
                                          AsientoSeleccionado="AgregarAsiento" />

                <hr />

                <table class="table table-light">
                    <thead class="table table-stripped">
                        <tr class="text-center">
                            <th>Asiento ID</th>
                            <th>Fila</th>
                            <th>Letra</th>
                            <th>Disponibilidad</th>
                            <th>Remover</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var asiento in AsientosSeleccionados)
                        {
                            <tr class="text-center">
                                <td class="ps-3">@asiento.AsientoId</td>
                                <td class="ps-3">@asiento.Fila</td>
                                <td class="ps-3">@asiento.Letra</td>
                                <td class="ps-3">@asiento.Existencia</td>
                                <td class="ps-3">
                                    <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverAsiento(asiento)"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="card-footer text-center">
            <button type="button" class="btn btn-morado bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
            <button type="submit" class="btn btn-morado  bi-floppy-fill"> Guardar Reserva</button>
        </div>
    </div>
</EditForm>

@code {
    public Reserva Reserva { get; set; } = new Reserva();
    public List<Origen> OrigenList { get; set; } = new List<Origen>();
    public List<Destino> DestinoList { get; set; } = new List<Destino>();
    public List<Asiento> AsientoList { get; set; } = new List<Asiento>();
    public List<Asiento> AsientosSeleccionados { get; set; } = new List<Asiento>();

    protected override async Task OnInitializedAsync()
    {
        OrigenList = await origenService.Listar(o => o.OrigenId > 0);
        DestinoList = await destinoService.Listar(o => o.DestinoId > 0);
        AsientoList = await asientosService.Listar(o => o.AsientoId > 0);


    }

    private void IncrementarPasajeros()
    {
        Reserva.NumeroPasajeros++;
    }

    private void DecrementarPasajeros()
    {
        if (Reserva.NumeroPasajeros > 1)
        {
            Reserva.NumeroPasajeros--;
        }
    }

    private void AgregarAsiento(int asientoId)
    {
        var asiento = AsientoList.SingleOrDefault(a => a.AsientoId == asientoId);
        if (asiento != null && !AsientosSeleccionados.Contains(asiento))
        {
            AsientosSeleccionados.Add(asiento);
        }
    }

    private void RemoverAsiento(Asiento asiento)
    {
        AsientosSeleccionados.Remove(asiento);
    }

    private async Task Crear()
    {
        if (!AsientosSeleccionados.Any())
        {
            Toast.Notify(new(ToastType.Warning, "No se han seleccionado asientos", "Por favor seleccione al menos un asiento."));
            return;
        }

        var crearReserva = await reservaService.Guardar(Reserva);

        if(crearReserva)
        {
        
            foreach (var asiento in AsientosSeleccionados)
            {
 
                var asientoReserva = new Asiento
                {
                        
                        AsientoId = asiento.AsientoId,
                        Fila = asiento.Fila,
                        Letra = asiento.Letra,
                        Existencia = asiento.Existencia,                     
                                               
               };

             
                await reservaService.Guardar(Reserva);
                Reserva = new Reserva();
                AsientosSeleccionados.Clear();
            }

    
            navigation.NavigateTo("/Reserva/Index");
        }
        else
        {
            Toast.Notify(new(ToastType.Danger, "Error al guardar la reserva", "Hubo un problema al guardar la reserva."));
        }

    }



    private void Volver()
    {
        navigation.NavigateTo("/Reserva/Index");
    }
}
