@page "/Reserva/Delete/{VueloId:int}"
@rendermode InteractiveServer
@inject ReservaService reservaService
@inject AsientoService asientoService 
@inject VueloService vueloService 
@inject NavigationManager navigation
@inject OrigenService origenService
@inject DestinoService destinoService
@inject ToastService Toast
<link rel="stylesheet" href="/Style/Reserve.css" />

<PageTitle>Reservas</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Eliminar Vuelo</strong></h3>
		</div>
		<div class="card-body">
			<h5><strong>Est&aacute;s seguro que deseas eliminar esta reserva?</strong></h5>
			<div class="mb-1">
				<p><strong>Vuelo ID:</strong>@Vuelo.VueloID</p>
			</div>
			<div class="mb-1">
				<p><strong>Origen:</strong>@Vuelo.Origen?.origen</p>
			</div>
			<div class="mb-1">
				<p><strong>Destino:</strong>@Vuelo?.Destino?.destino</p>
			</div>
			<div class="mb-1">
				<p><strong>Pasajeros:</strong>@Vuelo?.NumeroPasajeros</p>
			</div>
		</div>

		<div class="card-footer">
			<button type="button" class="btn btn-morado bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
			<button type="button" class="btn btn-morado bi bi-trash" @onclick="Elimnar">Eliminar</button>
		</div>
	</div>
</div>



@code {


	[Parameter]
	public int VueloId { get; set; }
	public int OrigenId { get; set; }
	public int DestinoId { get; set; }
	public Vuelo2 Vuelo { get; set; } = new Vuelo2();
	public Reserva2? reserva;
	public Asiento2 asiento { get; set; } = new Asiento2();
	public List<Asiento2> Asiento { get; set; } = new();
	public Origen2 origen { get; set; } = new Origen2();
	public Destino2 destino { get; set; } = new Destino2();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Vuelo = await vueloService.Buscar(VueloId);
		origen = await origenService.Buscar(OrigenId);
		destino = await destinoService.Buscar(DestinoId);
		
	}



	public async Task ElimnarOrigen()
	{
		if (Vuelo != null)
		{
			var eliminado = await vueloService.Eliminar(VueloId);
			if (eliminado)
			{
				navigation.NavigateTo("/Origen/Index");
				Toast.Notify(new(ToastType.Danger, "Origen Eliminado", "El origen se ha eliminado con exito!"));
			}
			else
			{
				Toast.Notify(new(ToastType.Warning, "Error al eliminar el origen!", "El origen no pudo eliminarse"));
			}
		}

	}


	public async Task Elimnar()
	{
		if (Vuelo != null)
		{
			var eliminado = await vueloService.Eliminar(VueloId);
			if (eliminado)
			{
				navigation.NavigateTo("/Reserva/Index");
				Toast.Notify(new(ToastType.Danger, "Vuelo eliminado!", "El vuelo se ha eliminado con exito"));
			}
			else
			{
				mensaje = "No se pudo eliminar el vuelo";
			}
		}

	}

	public void Volver()
	{
		navigation.NavigateTo("/Reserva/Index");
	}









}
