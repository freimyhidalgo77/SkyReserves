@page "/Destino/Edit/{DestinoId:int}"
@rendermode InteractiveServer
@inject DestinoService destinoService
@inject NavigationManager navigation
@inject ToastService Toast
<link rel="stylesheet" href="/Style/Destino/DestinoCreate.css" />

<PageTitle>Modificar vuelo de Destino </PageTitle>
<EditForm Model="Destino" OnValidSubmit="ModificarDestino">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h1><strong>Modificar destino de Vuelo</strong></h1>
            </div>
            <div class="card-body">

                <label class="form-label" for="OrigenId"><strong>Origen ID:</strong></label>
                <InputNumber id="OrigenId" class="form-control" @bind-Value="Destino.DestinoId" readonly></InputNumber>


                <label class="form-label" for="Fecha"><strong>Origen del Vuelo</strong></label>
                <InputText id="Fecha" class="form-control" @bind-Value="Destino.destino"></InputText>
                <ValidationMessage For="@(() => Destino.destino)" />

            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill"> Modificar</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public int DestinoId { get; set; }
    public Destino Destino { get; set; } = new Destino();
    public List<Destino> destinoList { get; set; } = new List<Destino>();
    public string Mensaje { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        Destino = await destinoService.Buscar(DestinoId);

    }

    public async Task<bool> Validar()
    {
        var destinoExiste = await destinoService.BuscarDestino(Destino.destino);
        if (destinoExiste != null)
        {
            Toast.Notify(new(ToastType.Warning, "Error al modificar el destino de vuelo", "Este destino ya existe cambie el destino de vuelo"));
            return false;
        }

        return true;
    }



    public async Task ModificarDestino()
    {
        if (await Validar())
        {

            Toast.Notify(new(ToastType.Primary, "Destino de vuelo Modificado", "El destino de vuelo se ha modificado con exito!"));
            await destinoService.Guardar(Destino);
            Destino = new Destino();
            navigation.NavigateTo("/Destino/Index");
        }
    }




    public void Volver()
    {
        navigation.NavigateTo("/Destino/Index");
    }

}
